import { AlertTriangle, CheckCircle, Info } from 'lucide-react';
import { useMemo } from 'react';

import { CharmCard } from './CharmCard';

import type { LucideIcon } from 'lucide-react';
import type { CharmValidationResult, CharmValidationStatus } from '@/types';

interface CharmValidationProps {
    validation: CharmValidationResult | null;
}


// ‰∏ªÈ¢òÈÖçÁΩÆ
interface ValidationTheme {
    Icon: LucideIcon;
    containerClass: string;
    iconClass: string;
    titleClass: string;
    listClass: string;
    charmListClass: string;
}

const THEMES: Record<string, ValidationTheme> = {
    SUCCESS: {
        Icon: CheckCircle,
        containerClass: "rounded-lg border p-4 border-green-500/20 bg-green-500/10 text-green-700",
        iconClass: "h-5 w-5 flex-shrink-0 mt-0.5 text-green-700",
        titleClass: "font-medium text-green-800",
        listClass: "text-green-800/90",
        charmListClass: "text-green-800/90",
    },
    WARNING: {
        Icon: Info,
        containerClass: "rounded-lg border p-4 border-warning/20 bg-warning/10",
        iconClass: "h-5 w-5 text-warning flex-shrink-0 mt-0.5",
        titleClass: "font-medium text-warning-foreground",
        listClass: "text-warning-foreground",
        charmListClass: "text-amber-800",
    },
    DESTRUCTIVE: {
        Icon: AlertTriangle,
        containerClass: "rounded-lg border p-4 border-destructive/20 bg-destructive/10",
        iconClass: "h-5 w-5 text-destructive flex-shrink-0 mt-0.5",
        titleClass: "font-medium mb-1 text-destructive",
        listClass: "text-destructive",
        charmListClass: "text-destructive",
    },
};

// ÈõÜ‰∏≠Â§ÑÁêÜÁä∂ÊÄÅ‰ø°ÊÅØ
const getStatusMessage = (status: CharmValidationStatus): string => {
    switch (status) {
        case 'REJECTED_AS_INFERIOR':
            return 'È™åËØÅ‰∏çÈÄöËøá';
        case 'ACCEPTED_AS_FIRST':
            return '1Ô∏è‚É£ Ê¨¢ËøéÊ∑ªÂä†Á¨¨‰∏Ä‰∏™Êä§Áü≥';
        case 'ACCEPTED_BY_MAX_VALUE':
            return 'ü•á Ê†∏ÂøÉÊäÄËÉΩ‰ª∑ÂÄºËææÂà∞Êñ∞È´òÔºÅ';
        case 'ACCEPTED_BY_MAX_SLOTS':
            return 'üåü Á≠âÊïàÂ≠î‰ΩçÊï∞ÈáèËææÂà∞Êñ∞È´òÔºÅ';
        case 'ACCEPTED_AS_UNIQUE_SKILL':
            return '‚ú® Â∏¶ÂÖ®Êñ∞ÊäÄËÉΩÁöÑÊä§Áü≥';
        case 'ACCEPTED':
            return 'È™åËØÅÈÄöËøá';
        default:
            return 'È™åËØÅÈÄöËøá';
    }
};

/**
 * Êä§Áü≥È™åËØÅÊèêÁ§∫ÁªÑ‰ª∂ÔºàÈáçÊûÑÁâàÔºâ
 * ÊòæÁ§∫Êù•Ëá™Êñ∞È™åËØÅÈÄªËæëÁöÑËØ¶ÁªÜ‰ø°ÊÅØ
 */
export function CharmValidation({ validation }: CharmValidationProps) {

    // ‰ΩøÁî® useMemo ‰ºòÂåñÊÄßËÉΩÔºåÈÅøÂÖçÂú®ÊØèÊ¨°Ê∏≤ÊüìÊó∂ÈÉΩÈáçÊñ∞ËÆ°ÁÆó
    const displayConfig = useMemo(() => {
        if (!validation) {
            return null;
        }

        const { status, warnings, betterCharm, outclassedCharms } = validation;

        const isRejected = status === 'REJECTED_AS_INFERIOR';
        const hasWarnings = !!warnings?.length;

        // 1. ÂÜ≥ÂÆö‰∏ªÈ¢ò
        const theme = isRejected
            ? THEMES.DESTRUCTIVE
            : hasWarnings
                ? THEMES.WARNING
                : THEMES.SUCCESS;

        // 2. Ëé∑Âèñ‰∏ª‰ø°ÊÅØ
        const message = getStatusMessage(status);

        return {
            theme,
            message,
            warnings,
            betterCharm,
            outclassedCharms,
        };
    }, [validation]);

    if (!displayConfig) {
        return null;
    }

    const { theme, message, warnings, betterCharm, outclassedCharms } = displayConfig;
    const { Icon, containerClass, iconClass, titleClass, listClass } = theme;

    return (
        <div className={containerClass}>
            <div className="flex items-start gap-3">
                <Icon className={iconClass} />
                <div className="flex-1">
                    <p className={titleClass}>{message}</p>
                    {(warnings?.length || betterCharm || outclassedCharms?.length) ? (
                        <ul className="text-sm space-y-2 mt-2">
                            {/* Ê∏≤ÊüìË≠¶Âëä‰ø°ÊÅØ */}
                            {warnings?.map((warning, index) => (
                                <li key={`warn-${index}`} className={listClass}>
                                    ‚Ä¢ {warning}
                                </li>
                            ))}

                            {/* Ê∏≤Êüì‰∏ä‰ΩçÊõø‰ª£Êä§Áü≥ */}
                            {betterCharm && (
                                <>
                                    <li className={listClass}>‚Ä¢ Â≠òÂú®‰ª•‰∏ã1‰∏™‰∏ä‰ΩçÊõø‰ª£Ôºö</li>
                                    <div className="mt-2 mb-4">
                                        <CharmCard charm={betterCharm} />
                                    </div>
                                </>
                            )}

                            {/* Ê∏≤Êüì‰∏ã‰ΩçÊõø‰ª£Êä§Áü≥ */}
                            {outclassedCharms?.length ? (
                                <>
                                    <li className={listClass}>‚Ä¢ ÂèØ‰∏ä‰ΩçÊõø‰ª£‰ª•‰∏ã{outclassedCharms.length}‰∏™Êä§Áü≥Ôºö</li>
                                    <div className="mt-2 mb-4 space-y-2">
                                        {outclassedCharms.slice(0, 3).map((charm, index) => (
                                            <CharmCard key={`out-${index}`} charm={charm} />
                                        ))}
                                    </div>
                                </>
                            ) : null}
                        </ul>
                    ) : null}
                </div>
            </div>
        </div>
    );
}